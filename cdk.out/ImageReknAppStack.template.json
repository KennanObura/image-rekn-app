{
  "Resources": {
    "cdkreknimagebucketA588DC88": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/cdk-rekn-imagebucket/Resource"
      }
    },
    "cdkreknimagebucketNotifications1C6C352D": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "cdkreknimagebucketA588DC88"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "rekognitionFunctionAC00BB5D",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Managed": true
      },
      "DependsOn": [
        "cdkreknimagebucketAllowBucketNotificationsToImageReknAppStackrekognitionFunction1DFD1E51C53BB176"
      ],
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/cdk-rekn-imagebucket/Notifications/Resource"
      }
    },
    "cdkreknimagebucketAllowBucketNotificationsToImageReknAppStackrekognitionFunction1DFD1E51C53BB176": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "rekognitionFunctionAC00BB5D",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "cdkreknimagebucketA588DC88",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/cdk-rekn-imagebucket/AllowBucketNotificationsToImageReknAppStackrekognitionFunction1DFD1E51"
      }
    },
    "cdkreknimagebucketresizedB7E2734B": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/cdk-rekn-imagebucket-resized/Resource"
      }
    },
    "imageLablesTable14391359": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "image",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "image",
            "AttributeType": "S"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageLablesTable/Resource"
      }
    },
    "pilBE267954": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "5e5f7a2bd37296bceeafc7d99535ba005beb562bde3344e93569de700f4affd4.zip"
        },
        "CompatibleRuntimes": [
          "python3.7"
        ],
        "Description": "A layer to enable the PIL library in our Rekognition Lambda",
        "LicenseInfo": "Apache-2.0"
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/pil/Resource",
        "aws:asset:path": "asset.5e5f7a2bd37296bceeafc7d99535ba005beb562bde3344e93569de700f4affd4",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Content"
      }
    },
    "rekognitionFunctionServiceRole85A1F6FD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/rekognitionFunction/ServiceRole/Resource"
      }
    },
    "rekognitionFunctionServiceRoleDefaultPolicy92A8E60B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "cdkreknimagebucketA588DC88",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "cdkreknimagebucketA588DC88",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "cdkreknimagebucketresizedB7E2734B",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "imageLablesTable14391359",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": "rekognition:DetectLabels",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "rekognitionFunctionServiceRoleDefaultPolicy92A8E60B",
        "Roles": [
          {
            "Ref": "rekognitionFunctionServiceRole85A1F6FD"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/rekognitionFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "rekognitionFunctionAC00BB5D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "fa13dadb751075528bea4a50df50d3f4e70ff6b62c0d67fee43d38320b431697.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "rekognitionFunctionServiceRole85A1F6FD",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "TABLE": {
              "Ref": "imageLablesTable14391359"
            },
            "BUCKET": {
              "Ref": "cdkreknimagebucketA588DC88"
            },
            "RESIZEDBUCKET": {
              "Ref": "cdkreknimagebucketresizedB7E2734B"
            }
          }
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "pilBE267954"
          }
        ],
        "MemorySize": 1024,
        "Runtime": "python3.7",
        "Timeout": 30
      },
      "DependsOn": [
        "rekognitionFunctionServiceRoleDefaultPolicy92A8E60B",
        "rekognitionFunctionServiceRole85A1F6FD"
      ],
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/rekognitionFunction/Resource",
        "aws:asset:path": "asset.fa13dadb751075528bea4a50df50d3f4e70ff6b62c0d67fee43d38320b431697",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n    response_status = \"SUCCESS\"\n    error_message = \"\"\n    try:\n        props = event[\"ResourceProperties\"]\n        bucket = props[\"BucketName\"]\n        notification_configuration = props[\"NotificationConfiguration\"]\n        request_type = event[\"RequestType\"]\n        managed = props.get('Managed', 'true').lower() == 'true'\n        stack_id = event['StackId']\n\n        if managed:\n          config = handle_managed(request_type, notification_configuration)\n        else:\n          config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n        put_bucket_notification_configuration(bucket, config)\n    except Exception as e:\n        logging.exception(\"Failed to put bucket notification configuration\")\n        response_status = \"FAILED\"\n        error_message = f\"Error: {str(e)}. \"\n    finally:\n        submit_response(event, context, response_status, error_message)\n\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n\n  # find external notifications\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  # if delete, that's all we need\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  # otherwise, merge external with incoming config and augment with id\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n  return notifications\n\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    # if the notification was created by us, we know what id to expect\n    # so we can filter by it.\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  return external_notifications\n\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n    response_body = json.dumps(\n        {\n            \"Status\": response_status,\n            \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n            \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n            \"StackId\": event[\"StackId\"],\n            \"RequestId\": event[\"RequestId\"],\n            \"LogicalResourceId\": event[\"LogicalResourceId\"],\n            \"NoEcho\": False,\n        }\n    ).encode(\"utf-8\")\n    headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n    try:\n        req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n        with urllib.request.urlopen(req) as response:\n            print(response.read().decode(\"utf-8\"))\n        print(\"Status code: \" + response.reason)\n    except Exception as e:\n        print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    },
    "serviceFunctionServiceRole77C1C7AE": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/serviceFunction/ServiceRole/Resource"
      }
    },
    "serviceFunctionServiceRoleDefaultPolicy1960C355": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "cdkreknimagebucketA588DC88",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "cdkreknimagebucketA588DC88",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "cdkreknimagebucketresizedB7E2734B",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "cdkreknimagebucketresizedB7E2734B",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "imageLablesTable14391359",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "serviceFunctionServiceRoleDefaultPolicy1960C355",
        "Roles": [
          {
            "Ref": "serviceFunctionServiceRole77C1C7AE"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/serviceFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "serviceFunction935310CC": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "c8f59353b89a68822f6d274fcbeede5870c35e8d0f8487d34d191f5ee74538e8.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "serviceFunctionServiceRole77C1C7AE",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "TABLE": {
              "Ref": "imageLablesTable14391359"
            },
            "BUCKET": {
              "Ref": "cdkreknimagebucketA588DC88"
            },
            "RESIZEDBUCKET": {
              "Ref": "cdkreknimagebucketresizedB7E2734B"
            }
          }
        },
        "Handler": "index.handler",
        "Runtime": "python3.7"
      },
      "DependsOn": [
        "serviceFunctionServiceRoleDefaultPolicy1960C355",
        "serviceFunctionServiceRole77C1C7AE"
      ],
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/serviceFunction/Resource",
        "aws:asset:path": "asset.c8f59353b89a68822f6d274fcbeede5870c35e8d0f8487d34d191f5ee74538e8",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "imageAPI120CAF85": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "imageAPI"
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Resource"
      }
    },
    "imageAPICloudWatchRole82F12D6C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/CloudWatchRole/Resource"
      }
    },
    "imageAPIAccount5B8B2C0D": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "imageAPICloudWatchRole82F12D6C",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "imageAPI120CAF85"
      ],
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Account"
      }
    },
    "imageAPIDeploymentC5C81B85a78d36ac8400521b59b55c5835f67044": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "imageAPI120CAF85"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "imageAPIimagesDELETE6CD934A8",
        "imageAPIimagesGET5BB2A791",
        "imageAPIimagesOPTIONSF5131040",
        "imageAPIimages7612E63A",
        "imageAPIOPTIONS9CB98D09"
      ],
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Deployment/Resource"
      }
    },
    "imageAPIDeploymentStageprodC0DF38A5": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "imageAPI120CAF85"
        },
        "DeploymentId": {
          "Ref": "imageAPIDeploymentC5C81B85a78d36ac8400521b59b55c5835f67044"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "imageAPIAccount5B8B2C0D"
      ],
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/DeploymentStage.prod/Resource"
      }
    },
    "imageAPIOPTIONS9CB98D09": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Fn::GetAtt": [
            "imageAPI120CAF85",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "imageAPI120CAF85"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              },
              "StatusCode": "204"
            }
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }"
          },
          "Type": "MOCK"
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "StatusCode": "204"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/OPTIONS/Resource"
      }
    },
    "imageAPIimages7612E63A": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "imageAPI120CAF85",
            "RootResourceId"
          ]
        },
        "PathPart": "images",
        "RestApiId": {
          "Ref": "imageAPI120CAF85"
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/Resource"
      }
    },
    "imageAPIimagesOPTIONSF5131040": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Ref": "imageAPIimages7612E63A"
        },
        "RestApiId": {
          "Ref": "imageAPI120CAF85"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              },
              "StatusCode": "204"
            }
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }"
          },
          "Type": "MOCK"
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "StatusCode": "204"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/OPTIONS/Resource"
      }
    },
    "imageAPIimagesGETApiPermissionImageReknAppStackimageAPIF299471EGETimagesADF338F3": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "serviceFunction935310CC",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "imageAPI120CAF85"
              },
              "/",
              {
                "Ref": "imageAPIDeploymentStageprodC0DF38A5"
              },
              "/GET/images"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/GET/ApiPermission.ImageReknAppStackimageAPIF299471E.GET..images"
      }
    },
    "imageAPIimagesGETApiPermissionTestImageReknAppStackimageAPIF299471EGETimages5220257A": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "serviceFunction935310CC",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "imageAPI120CAF85"
              },
              "/test-invoke-stage/GET/images"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/GET/ApiPermission.Test.ImageReknAppStackimageAPIF299471E.GET..images"
      }
    },
    "imageAPIimagesGET5BB2A791": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "imageAPIimages7612E63A"
        },
        "RestApiId": {
          "Ref": "imageAPI120CAF85"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": "200"
            },
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "SelectionPattern": "(\n|.)+",
              "StatusCode": "500"
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "RequestParameters": {
            "integration.request.querystring.action": "method.request.querystring.action",
            "integration.request.querystring.key": "method.request.querystring.key"
          },
          "RequestTemplates": {
            "application/json": "{\"action\":\"$util.escapeJavaScript($input.params('action'))\",\"key\":\"$util.escapeJavaScript($input.params('key'))\"}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "serviceFunction935310CC",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "200"
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "500"
          }
        ],
        "RequestParameters": {
          "method.request.querystring.action": true,
          "method.request.querystring.key": true
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/GET/Resource"
      }
    },
    "imageAPIimagesDELETEApiPermissionImageReknAppStackimageAPIF299471EDELETEimages58F36677": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "serviceFunction935310CC",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "imageAPI120CAF85"
              },
              "/",
              {
                "Ref": "imageAPIDeploymentStageprodC0DF38A5"
              },
              "/DELETE/images"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/DELETE/ApiPermission.ImageReknAppStackimageAPIF299471E.DELETE..images"
      }
    },
    "imageAPIimagesDELETEApiPermissionTestImageReknAppStackimageAPIF299471EDELETEimages300635EF": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "serviceFunction935310CC",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "imageAPI120CAF85"
              },
              "/test-invoke-stage/DELETE/images"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/DELETE/ApiPermission.Test.ImageReknAppStackimageAPIF299471E.DELETE..images"
      }
    },
    "imageAPIimagesDELETE6CD934A8": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "ResourceId": {
          "Ref": "imageAPIimages7612E63A"
        },
        "RestApiId": {
          "Ref": "imageAPI120CAF85"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": "200"
            },
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "SelectionPattern": "(\n|.)+",
              "StatusCode": "500"
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "RequestParameters": {
            "integration.request.querystring.action": "method.request.querystring.action",
            "integration.request.querystring.key": "method.request.querystring.key"
          },
          "RequestTemplates": {
            "application/json": "{\"action\":\"$util.escapeJavaScript($input.params('action'))\",\"key\":\"$util.escapeJavaScript($input.params('key'))\"}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "serviceFunction935310CC",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "200"
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": "500"
          }
        ],
        "RequestParameters": {
          "method.request.querystring.action": true,
          "method.request.querystring.key": true
        }
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/imageAPI/Default/images/DELETE/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WRTU/DMAyGfwv3LFAG3LshTkNMBXGd3MQrWZukahKmKsp/Jx+dNk5+3rx2bCePtHqmD3dwNivG+9UgWuo/LbCexKODN2vqN471aMn2qBYqYQMGAxlAthyoj+4eJymMEVqRHcw4feOURbT+6TenmF2MCwfCZwVS89j+C9oBk5khELM+gDFoDa1TIAIk9Y0uOTnu9SDYnGShQGAUHVg8w0z9Lo/YoLH1KHLNFWvGtFOWvOI46FmiynveqPgWXW5UIJZqNzFMy5N3tD+aJ3Ohi7s0yRzCrUr84ezo7DU5b5WuF6pL/lYrLsqjKM2Rnsz9b/VCq6f4TycjxGqKEwuJtCnxD/qSU3zDAQAA"
      },
      "Metadata": {
        "aws:cdk:path": "ImageReknAppStack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "imageBucket": {
      "Value": {
        "Ref": "cdkreknimagebucketA588DC88"
      }
    },
    "resizedBucket": {
      "Value": {
        "Ref": "cdkreknimagebucketresizedB7E2734B"
      }
    },
    "table": {
      "Value": {
        "Ref": "imageLablesTable14391359"
      }
    },
    "imageAPIEndpointD64DB231": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "imageAPI120CAF85"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "imageAPIDeploymentStageprodC0DF38A5"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}